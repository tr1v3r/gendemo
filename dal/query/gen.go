// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q          = new(Query)
	Addr       *addr
	Bank       *bank
	Company    *company
	CreditCard *creditCard
	Customer   *customer
	JustUser   *justUser
	Passport   *passport
	Person     *person
	TestField  *testField
	User       *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Addr = &Q.Addr
	Bank = &Q.Bank
	Company = &Q.Company
	CreditCard = &Q.CreditCard
	Customer = &Q.Customer
	JustUser = &Q.JustUser
	Passport = &Q.Passport
	Person = &Q.Person
	TestField = &Q.TestField
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		Addr:       newAddr(db, opts...),
		Bank:       newBank(db, opts...),
		Company:    newCompany(db, opts...),
		CreditCard: newCreditCard(db, opts...),
		Customer:   newCustomer(db, opts...),
		JustUser:   newJustUser(db, opts...),
		Passport:   newPassport(db, opts...),
		Person:     newPerson(db, opts...),
		TestField:  newTestField(db, opts...),
		User:       newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Addr       addr
	Bank       bank
	Company    company
	CreditCard creditCard
	Customer   customer
	JustUser   justUser
	Passport   passport
	Person     person
	TestField  testField
	User       user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Addr:       q.Addr.clone(db),
		Bank:       q.Bank.clone(db),
		Company:    q.Company.clone(db),
		CreditCard: q.CreditCard.clone(db),
		Customer:   q.Customer.clone(db),
		JustUser:   q.JustUser.clone(db),
		Passport:   q.Passport.clone(db),
		Person:     q.Person.clone(db),
		TestField:  q.TestField.clone(db),
		User:       q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Addr:       q.Addr.replaceDB(db),
		Bank:       q.Bank.replaceDB(db),
		Company:    q.Company.replaceDB(db),
		CreditCard: q.CreditCard.replaceDB(db),
		Customer:   q.Customer.replaceDB(db),
		JustUser:   q.JustUser.replaceDB(db),
		Passport:   q.Passport.replaceDB(db),
		Person:     q.Person.replaceDB(db),
		TestField:  q.TestField.replaceDB(db),
		User:       q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Addr       *addrDo
	Bank       *bankDo
	Company    *companyDo
	CreditCard *creditCardDo
	Customer   *customerDo
	JustUser   *justUserDo
	Passport   *passportDo
	Person     *personDo
	TestField  *testFieldDo
	User       *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Addr:       q.Addr.WithContext(ctx),
		Bank:       q.Bank.WithContext(ctx),
		Company:    q.Company.WithContext(ctx),
		CreditCard: q.CreditCard.WithContext(ctx),
		Customer:   q.Customer.WithContext(ctx),
		JustUser:   q.JustUser.WithContext(ctx),
		Passport:   q.Passport.WithContext(ctx),
		Person:     q.Person.WithContext(ctx),
		TestField:  q.TestField.WithContext(ctx),
		User:       q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
